=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module SwaggerClient
  class BlockHeader
    attr_accessor :chain_id

    attr_accessor :height

    attr_accessor :time

    attr_accessor :num_txs

    attr_accessor :last_block_id

    attr_accessor :total_txs

    attr_accessor :last_commit_hash

    attr_accessor :data_hash

    attr_accessor :validators_hash

    attr_accessor :next_validators_hash

    attr_accessor :consensus_hash

    attr_accessor :app_hash

    attr_accessor :last_results_hash

    attr_accessor :evidence_hash

    attr_accessor :proposer_address

    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chain_id' => :'chain_id',
        :'height' => :'height',
        :'time' => :'time',
        :'num_txs' => :'num_txs',
        :'last_block_id' => :'last_block_id',
        :'total_txs' => :'total_txs',
        :'last_commit_hash' => :'last_commit_hash',
        :'data_hash' => :'data_hash',
        :'validators_hash' => :'validators_hash',
        :'next_validators_hash' => :'next_validators_hash',
        :'consensus_hash' => :'consensus_hash',
        :'app_hash' => :'app_hash',
        :'last_results_hash' => :'last_results_hash',
        :'evidence_hash' => :'evidence_hash',
        :'proposer_address' => :'proposer_address',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'chain_id' => :'String',
        :'height' => :'Float',
        :'time' => :'String',
        :'num_txs' => :'Float',
        :'last_block_id' => :'BlockID',
        :'total_txs' => :'Float',
        :'last_commit_hash' => :'Hash',
        :'data_hash' => :'Hash',
        :'validators_hash' => :'Hash',
        :'next_validators_hash' => :'Hash',
        :'consensus_hash' => :'Hash',
        :'app_hash' => :'Hash',
        :'last_results_hash' => :'Hash',
        :'evidence_hash' => :'Hash',
        :'proposer_address' => :'Address',
        :'version' => :'BlockHeaderVersion'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'chain_id')
        self.chain_id = attributes[:'chain_id']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.has_key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.has_key?(:'num_txs')
        self.num_txs = attributes[:'num_txs']
      end

      if attributes.has_key?(:'last_block_id')
        self.last_block_id = attributes[:'last_block_id']
      end

      if attributes.has_key?(:'total_txs')
        self.total_txs = attributes[:'total_txs']
      end

      if attributes.has_key?(:'last_commit_hash')
        self.last_commit_hash = attributes[:'last_commit_hash']
      end

      if attributes.has_key?(:'data_hash')
        self.data_hash = attributes[:'data_hash']
      end

      if attributes.has_key?(:'validators_hash')
        self.validators_hash = attributes[:'validators_hash']
      end

      if attributes.has_key?(:'next_validators_hash')
        self.next_validators_hash = attributes[:'next_validators_hash']
      end

      if attributes.has_key?(:'consensus_hash')
        self.consensus_hash = attributes[:'consensus_hash']
      end

      if attributes.has_key?(:'app_hash')
        self.app_hash = attributes[:'app_hash']
      end

      if attributes.has_key?(:'last_results_hash')
        self.last_results_hash = attributes[:'last_results_hash']
      end

      if attributes.has_key?(:'evidence_hash')
        self.evidence_hash = attributes[:'evidence_hash']
      end

      if attributes.has_key?(:'proposer_address')
        self.proposer_address = attributes[:'proposer_address']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chain_id == o.chain_id &&
          height == o.height &&
          time == o.time &&
          num_txs == o.num_txs &&
          last_block_id == o.last_block_id &&
          total_txs == o.total_txs &&
          last_commit_hash == o.last_commit_hash &&
          data_hash == o.data_hash &&
          validators_hash == o.validators_hash &&
          next_validators_hash == o.next_validators_hash &&
          consensus_hash == o.consensus_hash &&
          app_hash == o.app_hash &&
          last_results_hash == o.last_results_hash &&
          evidence_hash == o.evidence_hash &&
          proposer_address == o.proposer_address &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [chain_id, height, time, num_txs, last_block_id, total_txs, last_commit_hash, data_hash, validators_hash, next_validators_hash, consensus_hash, app_hash, last_results_hash, evidence_hash, proposer_address, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
