=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class BankApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send coins from one account to another
    # @param address Account address in bech32 format
    # @param account The sender and tx information
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def bank_accounts_address_transfers_post(address, account, opts = {})
      data, _status_code, _headers = bank_accounts_address_transfers_post_with_http_info(address, account, opts)
      data
    end

    # Send coins from one account to another
    # @param address Account address in bech32 format
    # @param account The sender and tx information
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def bank_accounts_address_transfers_post_with_http_info(address, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankApi.bank_accounts_address_transfers_post ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BankApi.bank_accounts_address_transfers_post"
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling BankApi.bank_accounts_address_transfers_post"
      end
      # resource path
      local_var_path = '/bank/accounts/{address}/transfers'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankApi#bank_accounts_address_transfers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the account balances
    # @param address Account address in bech32 format
    # @param [Hash] opts the optional parameters
    # @return [Array<Coin>]
    def bank_balances_address_get(address, opts = {})
      data, _status_code, _headers = bank_balances_address_get_with_http_info(address, opts)
      data
    end

    # Get the account balances
    # @param address Account address in bech32 format
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coin>, Fixnum, Hash)>] Array<Coin> data, response status code and response headers
    def bank_balances_address_get_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankApi.bank_balances_address_get ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling BankApi.bank_balances_address_get"
      end
      # resource path
      local_var_path = '/bank/balances/{address}'.sub('{' + 'address' + '}', address.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coin>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankApi#bank_balances_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
