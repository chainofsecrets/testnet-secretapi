=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Decode a transaction from the Amino wire format
    # Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
    # @param tx The tx to decode
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def txs_decode_post(tx, opts = {})
      data, _status_code, _headers = txs_decode_post_with_http_info(tx, opts)
      data
    end

    # Decode a transaction from the Amino wire format
    # Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
    # @param tx The tx to decode
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def txs_decode_post_with_http_info(tx, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.txs_decode_post ...'
      end
      # verify the required parameter 'tx' is set
      if @api_client.config.client_side_validation && tx.nil?
        fail ArgumentError, "Missing the required parameter 'tx' when calling TransactionsApi.txs_decode_post"
      end
      # resource path
      local_var_path = '/txs/decode'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tx)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#txs_decode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Encode a transaction to the Amino wire format
    # Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
    # @param tx The tx to encode
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def txs_encode_post(tx, opts = {})
      data, _status_code, _headers = txs_encode_post_with_http_info(tx, opts)
      data
    end

    # Encode a transaction to the Amino wire format
    # Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
    # @param tx The tx to encode
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def txs_encode_post_with_http_info(tx, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.txs_encode_post ...'
      end
      # verify the required parameter 'tx' is set
      if @api_client.config.client_side_validation && tx.nil?
        fail ArgumentError, "Missing the required parameter 'tx' when calling TransactionsApi.txs_encode_post"
      end
      # resource path
      local_var_path = '/txs/encode'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tx)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#txs_encode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search transactions
    # Search transactions by events.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message_action transaction events such as &#39;message.action&#x3D;send&#39; which results in the following endpoint: &#39;GET /txs?message.action&#x3D;send&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
    # @option opts [String] :message_sender transaction tags with sender: &#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;secret16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv&#39;
    # @option opts [Integer] :page Page number
    # @option opts [Integer] :limit Maximum number of items per page
    # @option opts [Integer] :tx_minheight transactions on blocks with height greater or equal this value
    # @option opts [Integer] :tx_maxheight transactions on blocks with height less than or equal this value
    # @return [PaginatedQueryTxs]
    def txs_get(opts = {})
      data, _status_code, _headers = txs_get_with_http_info(opts)
      data
    end

    # Search transactions
    # Search transactions by events.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message_action transaction events such as &#39;message.action&#x3D;send&#39; which results in the following endpoint: &#39;GET /txs?message.action&#x3D;send&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
    # @option opts [String] :message_sender transaction tags with sender: &#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;secret16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv&#39;
    # @option opts [Integer] :page Page number
    # @option opts [Integer] :limit Maximum number of items per page
    # @option opts [Integer] :tx_minheight transactions on blocks with height greater or equal this value
    # @option opts [Integer] :tx_maxheight transactions on blocks with height less than or equal this value
    # @return [Array<(PaginatedQueryTxs, Fixnum, Hash)>] PaginatedQueryTxs data, response status code and response headers
    def txs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.txs_get ...'
      end
      # resource path
      local_var_path = '/txs'

      # query parameters
      query_params = {}
      query_params[:'message.action'] = opts[:'message_action'] if !opts[:'message_action'].nil?
      query_params[:'message.sender'] = opts[:'message_sender'] if !opts[:'message_sender'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'tx.minheight'] = opts[:'tx_minheight'] if !opts[:'tx_minheight'].nil?
      query_params[:'tx.maxheight'] = opts[:'tx_maxheight'] if !opts[:'tx_maxheight'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedQueryTxs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#txs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Tx by hash
    # Retrieve a transaction using its hash.
    # @param hash Tx hash
    # @param [Hash] opts the optional parameters
    # @return [TxQuery]
    def txs_hash_get(hash, opts = {})
      data, _status_code, _headers = txs_hash_get_with_http_info(hash, opts)
      data
    end

    # Get a Tx by hash
    # Retrieve a transaction using its hash.
    # @param hash Tx hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(TxQuery, Fixnum, Hash)>] TxQuery data, response status code and response headers
    def txs_hash_get_with_http_info(hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.txs_hash_get ...'
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling TransactionsApi.txs_hash_get"
      end
      # resource path
      local_var_path = '/txs/{hash}'.sub('{' + 'hash' + '}', hash.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TxQuery')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#txs_hash_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Broadcast a signed tx
    # Broadcast a signed tx to a full node
    # @param tx_broadcast The tx must be a signed StdTx. The supported broadcast modes include &#x60;\&quot;block\&quot;&#x60;(return after tx commit), &#x60;\&quot;sync\&quot;&#x60;(return afer CheckTx) and &#x60;\&quot;async\&quot;&#x60;(return right away).
    # @param [Hash] opts the optional parameters
    # @return [BroadcastTxCommitResult]
    def txs_post(tx_broadcast, opts = {})
      data, _status_code, _headers = txs_post_with_http_info(tx_broadcast, opts)
      data
    end

    # Broadcast a signed tx
    # Broadcast a signed tx to a full node
    # @param tx_broadcast The tx must be a signed StdTx. The supported broadcast modes include &#x60;\&quot;block\&quot;&#x60;(return after tx commit), &#x60;\&quot;sync\&quot;&#x60;(return afer CheckTx) and &#x60;\&quot;async\&quot;&#x60;(return right away).
    # @param [Hash] opts the optional parameters
    # @return [Array<(BroadcastTxCommitResult, Fixnum, Hash)>] BroadcastTxCommitResult data, response status code and response headers
    def txs_post_with_http_info(tx_broadcast, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.txs_post ...'
      end
      # verify the required parameter 'tx_broadcast' is set
      if @api_client.config.client_side_validation && tx_broadcast.nil?
        fail ArgumentError, "Missing the required parameter 'tx_broadcast' when calling TransactionsApi.txs_post"
      end
      # resource path
      local_var_path = '/txs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tx_broadcast)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastTxCommitResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#txs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
