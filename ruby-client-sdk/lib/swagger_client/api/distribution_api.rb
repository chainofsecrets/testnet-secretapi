=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class DistributionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Community pool parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<Coin>]
    def distribution_community_pool_get(opts = {})
      data, _status_code, _headers = distribution_community_pool_get_with_http_info(opts)
      data
    end

    # Community pool parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coin>, Fixnum, Hash)>] Array<Coin> data, response status code and response headers
    def distribution_community_pool_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_community_pool_get ...'
      end
      # resource path
      local_var_path = '/distribution/community_pool'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coin>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_community_pool_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the total rewards balance from all delegations
    # Get the sum of all the rewards earned by delegations by a single delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [DelegatorTotalRewards]
    def distribution_delegators_delegator_addr_rewards_get(delegator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_rewards_get_with_http_info(delegator_addr, opts)
      data
    end

    # Get the total rewards balance from all delegations
    # Get the sum of all the rewards earned by delegations by a single delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(DelegatorTotalRewards, Fixnum, Hash)>] DelegatorTotalRewards data, response status code and response headers
    def distribution_delegators_delegator_addr_rewards_get_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_rewards_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_get"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/rewards'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DelegatorTotalRewards')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_rewards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Withdraw all the delegator's delegation rewards
    # Withdraw all the delegator's delegation rewards
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody] :withdraw_request_body 
    # @return [StdTx]
    def distribution_delegators_delegator_addr_rewards_post(delegator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_rewards_post_with_http_info(delegator_addr, opts)
      data
    end

    # Withdraw all the delegator&#39;s delegation rewards
    # Withdraw all the delegator&#39;s delegation rewards
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody] :withdraw_request_body 
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def distribution_delegators_delegator_addr_rewards_post_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_rewards_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_post"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/rewards'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'withdraw_request_body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_rewards_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query a delegation reward
    # Query a single delegation reward by a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<Coin>]
    def distribution_delegators_delegator_addr_rewards_validator_addr_get(delegator_addr, validator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_rewards_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts)
      data
    end

    # Query a delegation reward
    # Query a single delegation reward by a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coin>, Fixnum, Hash)>] Array<Coin> data, response status code and response headers
    def distribution_delegators_delegator_addr_rewards_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_get"
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_get"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s).sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coin>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_rewards_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Withdraw a delegation reward
    # Withdraw a delegator's delegation reward from a single validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody1] :withdraw_request_body 
    # @return [StdTx]
    def distribution_delegators_delegator_addr_rewards_validator_addr_post(delegator_addr, validator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_rewards_validator_addr_post_with_http_info(delegator_addr, validator_addr, opts)
      data
    end

    # Withdraw a delegation reward
    # Withdraw a delegator&#39;s delegation reward from a single validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody1] :withdraw_request_body 
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def distribution_delegators_delegator_addr_rewards_validator_addr_post_with_http_info(delegator_addr, validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_post"
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_rewards_validator_addr_post"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s).sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'withdraw_request_body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_rewards_validator_addr_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the rewards withdrawal address
    # Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Address]
    def distribution_delegators_delegator_addr_withdraw_address_get(delegator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_withdraw_address_get_with_http_info(delegator_addr, opts)
      data
    end

    # Get the rewards withdrawal address
    # Get the delegations&#39; rewards withdrawal address. This is the address in which the user will receive the reward funds
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Address, Fixnum, Hash)>] Address data, response status code and response headers
    def distribution_delegators_delegator_addr_withdraw_address_get_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_withdraw_address_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_withdraw_address_get"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/withdraw_address'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Address')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_withdraw_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace the rewards withdrawal address
    # Replace the delegations' rewards withdrawal address for a new one.
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody2] :withdraw_request_body 
    # @return [StdTx]
    def distribution_delegators_delegator_addr_withdraw_address_post(delegator_addr, opts = {})
      data, _status_code, _headers = distribution_delegators_delegator_addr_withdraw_address_post_with_http_info(delegator_addr, opts)
      data
    end

    # Replace the rewards withdrawal address
    # Replace the delegations&#39; rewards withdrawal address for a new one.
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody2] :withdraw_request_body 
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def distribution_delegators_delegator_addr_withdraw_address_post_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_delegators_delegator_addr_withdraw_address_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling DistributionApi.distribution_delegators_delegator_addr_withdraw_address_post"
      end
      # resource path
      local_var_path = '/distribution/delegators/{delegatorAddr}/withdraw_address'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'withdraw_request_body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_delegators_delegator_addr_withdraw_address_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fee distribution parameters
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def distribution_parameters_get(opts = {})
      data, _status_code, _headers = distribution_parameters_get_with_http_info(opts)
      data
    end

    # Fee distribution parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def distribution_parameters_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_parameters_get ...'
      end
      # resource path
      local_var_path = '/distribution/parameters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_parameters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validator distribution information
    # Query the distribution information of a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [ValidatorDistInfo]
    def distribution_validators_validator_addr_get(validator_addr, opts = {})
      data, _status_code, _headers = distribution_validators_validator_addr_get_with_http_info(validator_addr, opts)
      data
    end

    # Validator distribution information
    # Query the distribution information of a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidatorDistInfo, Fixnum, Hash)>] ValidatorDistInfo data, response status code and response headers
    def distribution_validators_validator_addr_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_validators_validator_addr_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_validators_validator_addr_get"
      end
      # resource path
      local_var_path = '/distribution/validators/{validatorAddr}'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidatorDistInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_validators_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fee distribution outstanding rewards of a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<Coin>]
    def distribution_validators_validator_addr_outstanding_rewards_get(validator_addr, opts = {})
      data, _status_code, _headers = distribution_validators_validator_addr_outstanding_rewards_get_with_http_info(validator_addr, opts)
      data
    end

    # Fee distribution outstanding rewards of a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coin>, Fixnum, Hash)>] Array<Coin> data, response status code and response headers
    def distribution_validators_validator_addr_outstanding_rewards_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_validators_validator_addr_outstanding_rewards_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_validators_validator_addr_outstanding_rewards_get"
      end
      # resource path
      local_var_path = '/distribution/validators/{validatorAddr}/outstanding_rewards'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coin>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_validators_validator_addr_outstanding_rewards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Commission and self-delegation rewards of a single validator
    # Query the commission and self-delegation rewards of validator.
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<Coin>]
    def distribution_validators_validator_addr_rewards_get(validator_addr, opts = {})
      data, _status_code, _headers = distribution_validators_validator_addr_rewards_get_with_http_info(validator_addr, opts)
      data
    end

    # Commission and self-delegation rewards of a single validator
    # Query the commission and self-delegation rewards of validator.
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coin>, Fixnum, Hash)>] Array<Coin> data, response status code and response headers
    def distribution_validators_validator_addr_rewards_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_validators_validator_addr_rewards_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_validators_validator_addr_rewards_get"
      end
      # resource path
      local_var_path = '/distribution/validators/{validatorAddr}/rewards'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Coin>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_validators_validator_addr_rewards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Withdraw the validator's rewards
    # Withdraw the validator's self-delegation and commissions rewards
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody3] :withdraw_request_body 
    # @return [StdTx]
    def distribution_validators_validator_addr_rewards_post(validator_addr, opts = {})
      data, _status_code, _headers = distribution_validators_validator_addr_rewards_post_with_http_info(validator_addr, opts)
      data
    end

    # Withdraw the validator&#39;s rewards
    # Withdraw the validator&#39;s self-delegation and commissions rewards
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @option opts [WithdrawRequestBody3] :withdraw_request_body 
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def distribution_validators_validator_addr_rewards_post_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DistributionApi.distribution_validators_validator_addr_rewards_post ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling DistributionApi.distribution_validators_validator_addr_rewards_post"
      end
      # resource path
      local_var_path = '/distribution/validators/{validatorAddr}/rewards'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'withdraw_request_body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DistributionApi#distribution_validators_validator_addr_rewards_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
