=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class IBCApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Channel open-init
    # @param channel_open_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_channels_open_init_post(channel_open_init_request_body, opts = {})
      data, _status_code, _headers = ibc_channels_open_init_post_with_http_info(channel_open_init_request_body, opts)
      data
    end

    # Channel open-init
    # @param channel_open_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_channels_open_init_post_with_http_info(channel_open_init_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_channels_open_init_post ...'
      end
      # verify the required parameter 'channel_open_init_request_body' is set
      if @api_client.config.client_side_validation && channel_open_init_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_open_init_request_body' when calling IBCApi.ibc_channels_open_init_post"
      end
      # resource path
      local_var_path = '/ibc/channels/open-init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_open_init_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_channels_open_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Channel open-try
    # @param channel_open_try_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_channels_open_try_post(channel_open_try_request_body, opts = {})
      data, _status_code, _headers = ibc_channels_open_try_post_with_http_info(channel_open_try_request_body, opts)
      data
    end

    # Channel open-try
    # @param channel_open_try_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_channels_open_try_post_with_http_info(channel_open_try_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_channels_open_try_post ...'
      end
      # verify the required parameter 'channel_open_try_request_body' is set
      if @api_client.config.client_side_validation && channel_open_try_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_open_try_request_body' when calling IBCApi.ibc_channels_open_try_post"
      end
      # resource path
      local_var_path = '/ibc/channels/open-try'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_open_try_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_channels_open_try_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query client state
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [InlineResponse20010]
    def ibc_clients_client_id_client_state_get(client_id, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_client_state_get_with_http_info(client_id, opts)
      data
    end

    # Query client state
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def ibc_clients_client_id_client_state_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_client_state_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_client_state_get"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/client-state'.sub('{' + 'client-id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_client_state_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query connections of a client
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [ClientConnectionsResponse]
    def ibc_clients_client_id_connections_get(client_id, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_connections_get_with_http_info(client_id, opts)
      data
    end

    # Query connections of a client
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(ClientConnectionsResponse, Fixnum, Hash)>] ClientConnectionsResponse data, response status code and response headers
    def ibc_clients_client_id_connections_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_connections_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_connections_get"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/connections'.sub('{' + 'client-id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientConnectionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_connections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query cliet consensus-state
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [InlineResponse2009]
    def ibc_clients_client_id_consensus_state_get(client_id, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_consensus_state_get_with_http_info(client_id, opts)
      data
    end

    # Query cliet consensus-state
    # @param client_id Client ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def ibc_clients_client_id_consensus_state_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_consensus_state_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_consensus_state_get"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/consensus-state'.sub('{' + 'client-id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_consensus_state_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit misbehaviour
    # @param client_id Client ID
    # @param submit_misbehaviour_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_clients_client_id_misbehaviour_post(client_id, submit_misbehaviour_request_body, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_misbehaviour_post_with_http_info(client_id, submit_misbehaviour_request_body, opts)
      data
    end

    # Submit misbehaviour
    # @param client_id Client ID
    # @param submit_misbehaviour_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_clients_client_id_misbehaviour_post_with_http_info(client_id, submit_misbehaviour_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_misbehaviour_post ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_misbehaviour_post"
      end
      # verify the required parameter 'submit_misbehaviour_request_body' is set
      if @api_client.config.client_side_validation && submit_misbehaviour_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'submit_misbehaviour_request_body' when calling IBCApi.ibc_clients_client_id_misbehaviour_post"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/misbehaviour'.sub('{' + 'client-id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(submit_misbehaviour_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_misbehaviour_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query client root
    # @param client_id Client ID
    # @param height Root height
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [InlineResponse20011]
    def ibc_clients_client_id_roots_height_get(client_id, height, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_roots_height_get_with_http_info(client_id, height, opts)
      data
    end

    # Query client root
    # @param client_id Client ID
    # @param height Root height
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(InlineResponse20011, Fixnum, Hash)>] InlineResponse20011 data, response status code and response headers
    def ibc_clients_client_id_roots_height_get_with_http_info(client_id, height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_roots_height_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_roots_height_get"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling IBCApi.ibc_clients_client_id_roots_height_get"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/roots/{height}'.sub('{' + 'client-id' + '}', client_id.to_s).sub('{' + 'height' + '}', height.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_roots_height_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update client
    # @param client_id Client ID
    # @param update_client_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_clients_client_id_update_post(client_id, update_client_request_body, opts = {})
      data, _status_code, _headers = ibc_clients_client_id_update_post_with_http_info(client_id, update_client_request_body, opts)
      data
    end

    # Update client
    # @param client_id Client ID
    # @param update_client_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_clients_client_id_update_post_with_http_info(client_id, update_client_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_client_id_update_post ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling IBCApi.ibc_clients_client_id_update_post"
      end
      # verify the required parameter 'update_client_request_body' is set
      if @api_client.config.client_side_validation && update_client_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_client_request_body' when calling IBCApi.ibc_clients_client_id_update_post"
      end
      # resource path
      local_var_path = '/ibc/clients/{client-id}/update'.sub('{' + 'client-id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_client_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_client_id_update_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create client
    # @param create_client_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_clients_post(create_client_request_body, opts = {})
      data, _status_code, _headers = ibc_clients_post_with_http_info(create_client_request_body, opts)
      data
    end

    # Create client
    # @param create_client_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_clients_post_with_http_info(create_client_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_clients_post ...'
      end
      # verify the required parameter 'create_client_request_body' is set
      if @api_client.config.client_side_validation && create_client_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_client_request_body' when calling IBCApi.ibc_clients_post"
      end
      # resource path
      local_var_path = '/ibc/clients'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_client_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_clients_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query connection
    # @param connection_id Connection ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [ConnectionResponse]
    def ibc_connections_connection_id_get(connection_id, opts = {})
      data, _status_code, _headers = ibc_connections_connection_id_get_with_http_info(connection_id, opts)
      data
    end

    # Query connection
    # @param connection_id Connection ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(ConnectionResponse, Fixnum, Hash)>] ConnectionResponse data, response status code and response headers
    def ibc_connections_connection_id_get_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_connection_id_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling IBCApi.ibc_connections_connection_id_get"
      end
      # resource path
      local_var_path = '/ibc/connections/{connection-id}'.sub('{' + 'connection-id' + '}', connection_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_connection_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Connection open-ack
    # @param connection_id Connection ID
    # @param connection_open_ack_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_connections_connection_id_open_ack_post(connection_id, connection_open_ack_request_body, opts = {})
      data, _status_code, _headers = ibc_connections_connection_id_open_ack_post_with_http_info(connection_id, connection_open_ack_request_body, opts)
      data
    end

    # Connection open-ack
    # @param connection_id Connection ID
    # @param connection_open_ack_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_connections_connection_id_open_ack_post_with_http_info(connection_id, connection_open_ack_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_connection_id_open_ack_post ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling IBCApi.ibc_connections_connection_id_open_ack_post"
      end
      # verify the required parameter 'connection_open_ack_request_body' is set
      if @api_client.config.client_side_validation && connection_open_ack_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'connection_open_ack_request_body' when calling IBCApi.ibc_connections_connection_id_open_ack_post"
      end
      # resource path
      local_var_path = '/ibc/connections/{connection-id}/open-ack'.sub('{' + 'connection-id' + '}', connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connection_open_ack_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_connection_id_open_ack_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Connection open-confirm
    # @param connection_id Connection ID
    # @param connection_open_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_connections_connection_id_open_confirm_post(connection_id, connection_open_confirm_request_body, opts = {})
      data, _status_code, _headers = ibc_connections_connection_id_open_confirm_post_with_http_info(connection_id, connection_open_confirm_request_body, opts)
      data
    end

    # Connection open-confirm
    # @param connection_id Connection ID
    # @param connection_open_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_connections_connection_id_open_confirm_post_with_http_info(connection_id, connection_open_confirm_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_connection_id_open_confirm_post ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling IBCApi.ibc_connections_connection_id_open_confirm_post"
      end
      # verify the required parameter 'connection_open_confirm_request_body' is set
      if @api_client.config.client_side_validation && connection_open_confirm_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'connection_open_confirm_request_body' when calling IBCApi.ibc_connections_connection_id_open_confirm_post"
      end
      # resource path
      local_var_path = '/ibc/connections/{connection-id}/open-confirm'.sub('{' + 'connection-id' + '}', connection_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connection_open_confirm_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_connection_id_open_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query all connections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number
    # @option opts [Integer] :limit Maximum number of items per page
    # @return [Array<Connection>]
    def ibc_connections_get(opts = {})
      data, _status_code, _headers = ibc_connections_get_with_http_info(opts)
      data
    end

    # Query all connections
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number
    # @option opts [Integer] :limit Maximum number of items per page
    # @return [Array<(Array<Connection>, Fixnum, Hash)>] Array<Connection> data, response status code and response headers
    def ibc_connections_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_get ...'
      end
      # resource path
      local_var_path = '/ibc/connections'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Connection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Connection open-init
    # @param connection_open_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_connections_open_init_post(connection_open_init_request_body, opts = {})
      data, _status_code, _headers = ibc_connections_open_init_post_with_http_info(connection_open_init_request_body, opts)
      data
    end

    # Connection open-init
    # @param connection_open_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_connections_open_init_post_with_http_info(connection_open_init_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_open_init_post ...'
      end
      # verify the required parameter 'connection_open_init_request_body' is set
      if @api_client.config.client_side_validation && connection_open_init_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'connection_open_init_request_body' when calling IBCApi.ibc_connections_open_init_post"
      end
      # resource path
      local_var_path = '/ibc/connections/open-init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connection_open_init_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_open_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Connection open-try
    # @param connection_open_try_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_connections_open_try_post(connection_open_try_request_body, opts = {})
      data, _status_code, _headers = ibc_connections_open_try_post_with_http_info(connection_open_try_request_body, opts)
      data
    end

    # Connection open-try
    # @param connection_open_try_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_connections_open_try_post_with_http_info(connection_open_try_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_connections_open_try_post ...'
      end
      # verify the required parameter 'connection_open_try_request_body' is set
      if @api_client.config.client_side_validation && connection_open_try_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'connection_open_try_request_body' when calling IBCApi.ibc_connections_open_try_post"
      end
      # resource path
      local_var_path = '/ibc/connections/open-try'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(connection_open_try_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_connections_open_try_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query header
    # @param [Hash] opts the optional parameters
    # @return [Header]
    def ibc_header_get(opts = {})
      data, _status_code, _headers = ibc_header_get_with_http_info(opts)
      data
    end

    # Query header
    # @param [Hash] opts the optional parameters
    # @return [Array<(Header, Fixnum, Hash)>] Header data, response status code and response headers
    def ibc_header_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_header_get ...'
      end
      # resource path
      local_var_path = '/ibc/header'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Header')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_header_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query node consensus-state
    # @param [Hash] opts the optional parameters
    # @return [ConsensusState]
    def ibc_node_state_get(opts = {})
      data, _status_code, _headers = ibc_node_state_get_with_http_info(opts)
      data
    end

    # Query node consensus-state
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsensusState, Fixnum, Hash)>] ConsensusState data, response status code and response headers
    def ibc_node_state_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_node_state_get ...'
      end
      # resource path
      local_var_path = '/ibc/node-state'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsensusState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_node_state_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Receive packet
    # @param receive_packet_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_packets_receive_post(receive_packet_request_body, opts = {})
      data, _status_code, _headers = ibc_packets_receive_post_with_http_info(receive_packet_request_body, opts)
      data
    end

    # Receive packet
    # @param receive_packet_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_packets_receive_post_with_http_info(receive_packet_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_packets_receive_post ...'
      end
      # verify the required parameter 'receive_packet_request_body' is set
      if @api_client.config.client_side_validation && receive_packet_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'receive_packet_request_body' when calling IBCApi.ibc_packets_receive_post"
      end
      # resource path
      local_var_path = '/ibc/packets/receive'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(receive_packet_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_packets_receive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query IBC path
    # @param [Hash] opts the optional parameters
    # @return [String]
    def ibc_path_get(opts = {})
      data, _status_code, _headers = ibc_path_get_with_http_info(opts)
      data
    end

    # Query IBC path
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def ibc_path_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_path_get ...'
      end
      # resource path
      local_var_path = '/ibc/path'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Channel close-confirm
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_close_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_ports_port_id_channels_channel_id_close_confirm_post(port_id, channel_id, channel_close_confirm_request_body, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_close_confirm_post_with_http_info(port_id, channel_id, channel_close_confirm_request_body, opts)
      data
    end

    # Channel close-confirm
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_close_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_close_confirm_post_with_http_info(port_id, channel_id, channel_close_confirm_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_close_confirm_post ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_confirm_post"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_confirm_post"
      end
      # verify the required parameter 'channel_close_confirm_request_body' is set
      if @api_client.config.client_side_validation && channel_close_confirm_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_close_confirm_request_body' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_confirm_post"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/close-confirm'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_close_confirm_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_close_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Channel close-init
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_close_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_ports_port_id_channels_channel_id_close_init_post(port_id, channel_id, channel_close_init_request_body, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_close_init_post_with_http_info(port_id, channel_id, channel_close_init_request_body, opts)
      data
    end

    # Channel close-init
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_close_init_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_close_init_post_with_http_info(port_id, channel_id, channel_close_init_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_close_init_post ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_init_post"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_init_post"
      end
      # verify the required parameter 'channel_close_init_request_body' is set
      if @api_client.config.client_side_validation && channel_close_init_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_close_init_request_body' when calling IBCApi.ibc_ports_port_id_channels_channel_id_close_init_post"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/close-init'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_close_init_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_close_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query channel
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [ChannelResponse]
    def ibc_ports_port_id_channels_channel_id_get(port_id, channel_id, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_get_with_http_info(port_id, channel_id, opts)
      data
    end

    # Query channel
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :prove Proof of result
    # @return [Array<(ChannelResponse, Fixnum, Hash)>] ChannelResponse data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_get_with_http_info(port_id, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_get ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_get"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_get"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'prove'] = opts[:'prove'] if !opts[:'prove'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query next sequence receive
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def ibc_ports_port_id_channels_channel_id_next_sequence_recv_get(port_id, channel_id, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_next_sequence_recv_get_with_http_info(port_id, channel_id, opts)
      data
    end

    # Query next sequence receive
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_next_sequence_recv_get_with_http_info(port_id, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_next_sequence_recv_get ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_next_sequence_recv_get"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_next_sequence_recv_get"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/next-sequence-recv'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_next_sequence_recv_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Channel open-ack
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_open_ack_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_ports_port_id_channels_channel_id_open_ack_post(port_id, channel_id, channel_open_ack_request_body, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_open_ack_post_with_http_info(port_id, channel_id, channel_open_ack_request_body, opts)
      data
    end

    # Channel open-ack
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_open_ack_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_open_ack_post_with_http_info(port_id, channel_id, channel_open_ack_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_open_ack_post ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_ack_post"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_ack_post"
      end
      # verify the required parameter 'channel_open_ack_request_body' is set
      if @api_client.config.client_side_validation && channel_open_ack_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_open_ack_request_body' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_ack_post"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/open-ack'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_open_ack_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_open_ack_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Channel open-confirm
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_open_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_ports_port_id_channels_channel_id_open_confirm_post(port_id, channel_id, channel_open_confirm_request_body, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_open_confirm_post_with_http_info(port_id, channel_id, channel_open_confirm_request_body, opts)
      data
    end

    # Channel open-confirm
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param channel_open_confirm_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_open_confirm_post_with_http_info(port_id, channel_id, channel_open_confirm_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_open_confirm_post ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_confirm_post"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_confirm_post"
      end
      # verify the required parameter 'channel_open_confirm_request_body' is set
      if @api_client.config.client_side_validation && channel_open_confirm_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'channel_open_confirm_request_body' when calling IBCApi.ibc_ports_port_id_channels_channel_id_open_confirm_post"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/open-confirm'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(channel_open_confirm_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_open_confirm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer token
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param transfer_token_request_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def ibc_ports_port_id_channels_channel_id_transfer_post(port_id, channel_id, transfer_token_request_body, opts = {})
      data, _status_code, _headers = ibc_ports_port_id_channels_channel_id_transfer_post_with_http_info(port_id, channel_id, transfer_token_request_body, opts)
      data
    end

    # Transfer token
    # @param port_id Port ID
    # @param channel_id Channel ID
    # @param transfer_token_request_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def ibc_ports_port_id_channels_channel_id_transfer_post_with_http_info(port_id, channel_id, transfer_token_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IBCApi.ibc_ports_port_id_channels_channel_id_transfer_post ...'
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_transfer_post"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling IBCApi.ibc_ports_port_id_channels_channel_id_transfer_post"
      end
      # verify the required parameter 'transfer_token_request_body' is set
      if @api_client.config.client_side_validation && transfer_token_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_token_request_body' when calling IBCApi.ibc_ports_port_id_channels_channel_id_transfer_post"
      end
      # resource path
      local_var_path = '/ibc/ports/{port-id}/channels/{channel-id}/transfer'.sub('{' + 'port-id' + '}', port_id.to_s).sub('{' + 'channel-id' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transfer_token_request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IBCApi#ibc_ports_port_id_channels_channel_id_transfer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
