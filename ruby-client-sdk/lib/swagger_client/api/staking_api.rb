=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class StakingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all delegations from a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<Delegation>]
    def staking_delegators_delegator_addr_delegations_get(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_delegations_get_with_http_info(delegator_addr, opts)
      data
    end

    # Get all delegations from a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Delegation>, Fixnum, Hash)>] Array<Delegation> data, response status code and response headers
    def staking_delegators_delegator_addr_delegations_get_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_delegations_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_delegations_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/delegations'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Delegation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_delegations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit delegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation] :delegation The password of the account to remove from the KMS
    # @return [StdTx]
    def staking_delegators_delegator_addr_delegations_post(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_delegations_post_with_http_info(delegator_addr, opts)
      data
    end

    # Submit delegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation] :delegation The password of the account to remove from the KMS
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def staking_delegators_delegator_addr_delegations_post_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_delegations_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_delegations_post"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/delegations'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'delegation'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_delegations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query the current delegation between a delegator and a validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Delegation]
    def staking_delegators_delegator_addr_delegations_validator_addr_get(delegator_addr, validator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts)
      data
    end

    # Query the current delegation between a delegator and a validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Delegation, Fixnum, Hash)>] Delegation data, response status code and response headers
    def staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_delegations_validator_addr_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_delegations_validator_addr_get"
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_delegators_delegator_addr_delegations_validator_addr_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s).sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Delegation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_delegations_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit a redelegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation2] :delegation The sender and tx information
    # @return [StdTx]
    def staking_delegators_delegator_addr_redelegations_post(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_redelegations_post_with_http_info(delegator_addr, opts)
      data
    end

    # Submit a redelegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation2] :delegation The sender and tx information
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def staking_delegators_delegator_addr_redelegations_post_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_redelegations_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_redelegations_post"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/redelegations'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'delegation'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_redelegations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all unbonding delegations from a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<UnbondingDelegation>]
    def staking_delegators_delegator_addr_unbonding_delegations_get(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(delegator_addr, opts)
      data
    end

    # Get all unbonding delegations from a delegator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnbondingDelegation>, Fixnum, Hash)>] Array<UnbondingDelegation> data, response status code and response headers
    def staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_unbonding_delegations_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_unbonding_delegations_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/unbonding_delegations'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UnbondingDelegation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_unbonding_delegations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit an unbonding delegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation1] :delegation The password of the account to remove from the KMS
    # @return [StdTx]
    def staking_delegators_delegator_addr_unbonding_delegations_post(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(delegator_addr, opts)
      data
    end

    # Submit an unbonding delegation
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @option opts [Delegation1] :delegation The password of the account to remove from the KMS
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_unbonding_delegations_post ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_unbonding_delegations_post"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/unbonding_delegations'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'delegation'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_unbonding_delegations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query all unbonding delegations between a delegator and a validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [UnbondingDelegationPair]
    def staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get(delegator_addr, validator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts)
      data
    end

    # Query all unbonding delegations between a delegator and a validator
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnbondingDelegationPair, Fixnum, Hash)>] UnbondingDelegationPair data, response status code and response headers
    def staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get"
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s).sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnbondingDelegationPair')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query all validators that a delegator is bonded to
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<Validator>]
    def staking_delegators_delegator_addr_validators_get(delegator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_validators_get_with_http_info(delegator_addr, opts)
      data
    end

    # Query all validators that a delegator is bonded to
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Validator>, Fixnum, Hash)>] Array<Validator> data, response status code and response headers
    def staking_delegators_delegator_addr_validators_get_with_http_info(delegator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_validators_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_validators_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/validators'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Validator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_validators_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query a validator that a delegator is bonded to
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 ValAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Validator]
    def staking_delegators_delegator_addr_validators_validator_addr_get(delegator_addr, validator_addr, opts = {})
      data, _status_code, _headers = staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts)
      data
    end

    # Query a validator that a delegator is bonded to
    # @param delegator_addr Bech32 AccAddress of Delegator
    # @param validator_addr Bech32 ValAddress of Delegator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Validator, Fixnum, Hash)>] Validator data, response status code and response headers
    def staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(delegator_addr, validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_delegators_delegator_addr_validators_validator_addr_get ...'
      end
      # verify the required parameter 'delegator_addr' is set
      if @api_client.config.client_side_validation && delegator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'delegator_addr' when calling StakingApi.staking_delegators_delegator_addr_validators_validator_addr_get"
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_delegators_delegator_addr_validators_validator_addr_get"
      end
      # resource path
      local_var_path = '/staking/delegators/{delegatorAddr}/validators/{validatorAddr}'.sub('{' + 'delegatorAddr' + '}', delegator_addr.to_s).sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Validator')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_delegators_delegator_addr_validators_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current staking parameter values
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def staking_parameters_get(opts = {})
      data, _status_code, _headers = staking_parameters_get_with_http_info(opts)
      data
    end

    # Get the current staking parameter values
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def staking_parameters_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_parameters_get ...'
      end
      # resource path
      local_var_path = '/staking/parameters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_parameters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current state of the staking pool
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def staking_pool_get(opts = {})
      data, _status_code, _headers = staking_pool_get_with_http_info(opts)
      data
    end

    # Get the current state of the staking pool
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def staking_pool_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_pool_get ...'
      end
      # resource path
      local_var_path = '/staking/pool'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_pool_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all redelegations (filter by query params)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delegator Bech32 AccAddress of Delegator
    # @option opts [String] :validator_from Bech32 ValAddress of SrcValidator
    # @option opts [String] :validator_to Bech32 ValAddress of DstValidator
    # @return [Array<Redelegation>]
    def staking_redelegations_get(opts = {})
      data, _status_code, _headers = staking_redelegations_get_with_http_info(opts)
      data
    end

    # Get all redelegations (filter by query params)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delegator Bech32 AccAddress of Delegator
    # @option opts [String] :validator_from Bech32 ValAddress of SrcValidator
    # @option opts [String] :validator_to Bech32 ValAddress of DstValidator
    # @return [Array<(Array<Redelegation>, Fixnum, Hash)>] Array<Redelegation> data, response status code and response headers
    def staking_redelegations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_redelegations_get ...'
      end
      # resource path
      local_var_path = '/staking/redelegations'

      # query parameters
      query_params = {}
      query_params[:'delegator'] = opts[:'delegator'] if !opts[:'delegator'].nil?
      query_params[:'validator_from'] = opts[:'validator_from'] if !opts[:'validator_from'].nil?
      query_params[:'validator_to'] = opts[:'validator_to'] if !opts[:'validator_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Redelegation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_redelegations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all validator candidates. By default it returns only the bonded validators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The validator bond status. Must be either &#39;bonded&#39;, &#39;unbonded&#39;, or &#39;unbonding&#39;.
    # @option opts [Integer] :page The page number.
    # @option opts [Integer] :limit The maximum number of items per page.
    # @return [Array<Validator>]
    def staking_validators_get(opts = {})
      data, _status_code, _headers = staking_validators_get_with_http_info(opts)
      data
    end

    # Get all validator candidates. By default it returns only the bonded validators.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The validator bond status. Must be either &#39;bonded&#39;, &#39;unbonded&#39;, or &#39;unbonding&#39;.
    # @option opts [Integer] :page The page number.
    # @option opts [Integer] :limit The maximum number of items per page.
    # @return [Array<(Array<Validator>, Fixnum, Hash)>] Array<Validator> data, response status code and response headers
    def staking_validators_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_validators_get ...'
      end
      # resource path
      local_var_path = '/staking/validators'

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Validator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_validators_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all delegations from a validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<Delegation>]
    def staking_validators_validator_addr_delegations_get(validator_addr, opts = {})
      data, _status_code, _headers = staking_validators_validator_addr_delegations_get_with_http_info(validator_addr, opts)
      data
    end

    # Get all delegations from a validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Delegation>, Fixnum, Hash)>] Array<Delegation> data, response status code and response headers
    def staking_validators_validator_addr_delegations_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_validators_validator_addr_delegations_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_validators_validator_addr_delegations_get"
      end
      # resource path
      local_var_path = '/staking/validators/{validatorAddr}/delegations'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Delegation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_validators_validator_addr_delegations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query the information from a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Validator]
    def staking_validators_validator_addr_get(validator_addr, opts = {})
      data, _status_code, _headers = staking_validators_validator_addr_get_with_http_info(validator_addr, opts)
      data
    end

    # Query the information from a single validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Validator, Fixnum, Hash)>] Validator data, response status code and response headers
    def staking_validators_validator_addr_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_validators_validator_addr_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_validators_validator_addr_get"
      end
      # resource path
      local_var_path = '/staking/validators/{validatorAddr}'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Validator')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_validators_validator_addr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all unbonding delegations from a validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<UnbondingDelegation>]
    def staking_validators_validator_addr_unbonding_delegations_get(validator_addr, opts = {})
      data, _status_code, _headers = staking_validators_validator_addr_unbonding_delegations_get_with_http_info(validator_addr, opts)
      data
    end

    # Get all unbonding delegations from a validator
    # @param validator_addr Bech32 OperatorAddress of validator
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnbondingDelegation>, Fixnum, Hash)>] Array<UnbondingDelegation> data, response status code and response headers
    def staking_validators_validator_addr_unbonding_delegations_get_with_http_info(validator_addr, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StakingApi.staking_validators_validator_addr_unbonding_delegations_get ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling StakingApi.staking_validators_validator_addr_unbonding_delegations_get"
      end
      # resource path
      local_var_path = '/staking/validators/{validatorAddr}/unbonding_delegations'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UnbondingDelegation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StakingApi#staking_validators_validator_addr_unbonding_delegations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
