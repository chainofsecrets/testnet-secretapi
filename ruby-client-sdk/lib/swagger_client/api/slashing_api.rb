=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class SlashingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the current slashing parameters
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def slashing_parameters_get(opts = {})
      data, _status_code, _headers = slashing_parameters_get_with_http_info(opts)
      data
    end

    # Get the current slashing parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def slashing_parameters_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlashingApi.slashing_parameters_get ...'
      end
      # resource path
      local_var_path = '/slashing/parameters'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlashingApi#slashing_parameters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sign info of given all validators
    # Get sign info of all validators
    # @param page Page number
    # @param limit Maximum number of items per page
    # @param [Hash] opts the optional parameters
    # @return [Array<SigningInfo>]
    def slashing_signing_infos_get(page, limit, opts = {})
      data, _status_code, _headers = slashing_signing_infos_get_with_http_info(page, limit, opts)
      data
    end

    # Get sign info of given all validators
    # Get sign info of all validators
    # @param page Page number
    # @param limit Maximum number of items per page
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SigningInfo>, Fixnum, Hash)>] Array<SigningInfo> data, response status code and response headers
    def slashing_signing_infos_get_with_http_info(page, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlashingApi.slashing_signing_infos_get ...'
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling SlashingApi.slashing_signing_infos_get"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling SlashingApi.slashing_signing_infos_get"
      end
      # resource path
      local_var_path = '/slashing/signing_infos'

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'limit'] = limit

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SigningInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlashingApi#slashing_signing_infos_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unjail a jailed validator
    # Send transaction to unjail a jailed validator
    # @param validator_addr Bech32 validator address
    # @param unjail_body 
    # @param [Hash] opts the optional parameters
    # @return [StdTx]
    def slashing_validators_validator_addr_unjail_post(validator_addr, unjail_body, opts = {})
      data, _status_code, _headers = slashing_validators_validator_addr_unjail_post_with_http_info(validator_addr, unjail_body, opts)
      data
    end

    # Unjail a jailed validator
    # Send transaction to unjail a jailed validator
    # @param validator_addr Bech32 validator address
    # @param unjail_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StdTx, Fixnum, Hash)>] StdTx data, response status code and response headers
    def slashing_validators_validator_addr_unjail_post_with_http_info(validator_addr, unjail_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SlashingApi.slashing_validators_validator_addr_unjail_post ...'
      end
      # verify the required parameter 'validator_addr' is set
      if @api_client.config.client_side_validation && validator_addr.nil?
        fail ArgumentError, "Missing the required parameter 'validator_addr' when calling SlashingApi.slashing_validators_validator_addr_unjail_post"
      end
      # verify the required parameter 'unjail_body' is set
      if @api_client.config.client_side_validation && unjail_body.nil?
        fail ArgumentError, "Missing the required parameter 'unjail_body' when calling SlashingApi.slashing_validators_validator_addr_unjail_post"
      end
      # resource path
      local_var_path = '/slashing/validators/{validatorAddr}/unjail'.sub('{' + 'validatorAddr' + '}', validator_addr.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(unjail_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StdTx')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlashingApi#slashing_validators_validator_addr_unjail_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
