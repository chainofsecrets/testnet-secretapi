=begin
#Testnet Secret API for Secret Network

#A REST interface for state queries, transaction generation and broadcasting.

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::TransactionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TransactionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::TransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TransactionsApi' do
    it 'should create an instance of TransactionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::TransactionsApi)
    end
  end

  # unit tests for txs_decode_post
  # Decode a transaction from the Amino wire format
  # Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
  # @param tx The tx to decode
  # @param [Hash] opts the optional parameters
  # @return [StdTx]
  describe 'txs_decode_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for txs_encode_post
  # Encode a transaction to the Amino wire format
  # Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
  # @param tx The tx to encode
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'txs_encode_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for txs_get
  # Search transactions
  # Search transactions by events.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :message_action transaction events such as &#39;message.action&#x3D;send&#39; which results in the following endpoint: &#39;GET /txs?message.action&#x3D;send&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
  # @option opts [String] :message_sender transaction tags with sender: &#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;secret16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv&#39;
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :limit Maximum number of items per page
  # @option opts [Integer] :tx_minheight transactions on blocks with height greater or equal this value
  # @option opts [Integer] :tx_maxheight transactions on blocks with height less than or equal this value
  # @return [PaginatedQueryTxs]
  describe 'txs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for txs_hash_get
  # Get a Tx by hash
  # Retrieve a transaction using its hash.
  # @param hash Tx hash
  # @param [Hash] opts the optional parameters
  # @return [TxQuery]
  describe 'txs_hash_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for txs_post
  # Broadcast a signed tx
  # Broadcast a signed tx to a full node
  # @param tx_broadcast The tx must be a signed StdTx. The supported broadcast modes include &#x60;\&quot;block\&quot;&#x60;(return after tx commit), &#x60;\&quot;sync\&quot;&#x60;(return afer CheckTx) and &#x60;\&quot;async\&quot;&#x60;(return right away).
  # @param [Hash] opts the optional parameters
  # @return [BroadcastTxCommitResult]
  describe 'txs_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
